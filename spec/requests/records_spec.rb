require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/records', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Record. As you add validations to Record, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }

  let(:valid_attributes) do
    {
      meal_image: fixture_file_upload('spec/fixtures/test_image.png')
    }
  end

  let(:invalid_attributes) do
    {
      meal_image: ''
    }
  end

  before do
    disable_csrf_protection
    request_login_as(user)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      create(:record)
      get records_path
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_record_path
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Record' do
        expect do
          post records_path, params: { record: valid_attributes }
        end.to change(Record, :count).by(1)
      end

      it 'redirects to the created record' do
        post records_path, params: { record: valid_attributes }
        expect(response).to redirect_to(records_path)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Record' do
        expect do
          post records_path, params: { record: invalid_attributes }
        end.to change(Record, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post records_path, params: { record: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    let!(:record) { create(:record, user_id: user.id) }
    it 'destroys the requested record' do
      expect do
        delete record_path(record)
      end.to change(Record, :count).by(-1)
    end

    it 'redirects to the records list' do
      delete record_path(record)
      expect(response).to redirect_to(records_path)
    end
  end
end
